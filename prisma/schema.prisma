// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

/*
Google OAuthのアカウントを管理するテーブル。Auth.js用
*/
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/*
ログインユーザーのセッションを管理するテーブル。Auth.js用
*/
model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/*
Digichatユーザーを管理するテーブル
*/
model User {
  id              String            @id @default(uuid()) @db.Uuid
  /// ユーザーが自由に設定できる一意なID
  slug            String            @unique
  /// 表示名
  name            String
  /// 大学のGmailアカウント。sicなし
  email           String            @unique
  emailVerified   DateTime?         @map("email_verified")
  accounts        Account[]
  sessions        Session[]
  /// アイコン画像のURL
  image           String?
  /// オンライン状態
  status          UserStatus
  /// 自己紹介
  description     String?
  role            UserRole          @relation(fields: [roleId], references: [id])
  roleId          String            @db.Uuid
  verifiedAt      DateTime?
  workspaces      WorkspaceMember[]
  createdChannels Channel[]
  createdThreads  Thread[]
  threads         ThreadMember[]
  channels        ChannelMember[]
  messages        Message[]
  reactions       Reaction[]
  pinnedMessages  PinnedMessage[]
  bookmarks       Bookmark[]
  mentions        Mention[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

/*
ユーザーのロールを管理するテーブル
*/
model UserRole {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  permissions Json
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/*
ワークスペースを管理するテーブル
*/
model Workspace {
  id           String            @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  users        WorkspaceMember[]
  channels     Channel[]
  customEmojis CustomEmoji[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(uuid()) @db.Uuid
  /// ユーザーテーブルのユーザーと紐づける。同一のユーザーが複数のワークスペースに参加できる
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        String
  joinDate    DateTime  @default(now())
  leaveDate   DateTime?
}

model Channel {
  /// 自動生成されるID。URLにはこれを使用する
  id             String          @id @default(uuid()) @db.Uuid
  /// nameに統合したので非推奨
  slug           String          @unique
  /// ユーザーが直接目にするチャンネルの名前
  name           String
  workspaceId    String          @db.Uuid
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  creatorId      String?         @db.Uuid
  creator        User?           @relation(fields: [creatorId], references: [id])
  description    String?
  type           ChannelType
  threads        Thread[]
  members        ChannelMember[]
  messages       Message[]
  pinnedMessages PinnedMessage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Thread {
  id              String         @id @default(uuid()) @db.Uuid
  parentChannelId String         @db.Uuid
  parentChannel   Channel        @relation(fields: [parentChannelId], references: [id])
  creatorId       String         @db.Uuid
  creator         User           @relation(fields: [creatorId], references: [id])
  /// スレッドの最初のメッセージ
  messageId       String         @db.Uuid
  message         Message        @relation(name: "startWith", fields: [messageId], references: [id])
  /// スレッドのタイトル。デフォルトは最初のメッセージとし、あとから変更可能
  title           String
  /// スレッドの説明。デフォルトは空文字とし、あとから変更可能
  description     String
  members         ThreadMember[]
  messages        Message[]      @relation(name: "contains")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

/*
スレッドをフォロー中のユーザーを管理するテーブル。通知を送信する対象
*/
model ThreadMember {
  threadId  String   @db.Uuid
  thread    Thread   @relation(fields: [threadId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([threadId, userId])
}

model ChannelMember {
  userId         String            @db.Uuid
  user           User              @relation(fields: [userId], references: [id])
  channelId      String            @db.Uuid
  channel        Channel           @relation(fields: [channelId], references: [id])
  role           ChannelMemberRole
  joinDate       DateTime          @default(now())
  /// チャンネルに最後にアクセスした日時。既読の管理に使用
  lastAccessedAt DateTime          @default(now())

  @@id([channelId, userId])
}

model Message {
  id             String          @id @default(uuid()) @db.Uuid
  channelId      String          @db.Uuid
  channel        Channel         @relation(fields: [channelId], references: [id])
  threadId       String?         @db.Uuid
  thread         Thread?         @relation(name: "contains", fields: [threadId], references: [id])
  threads        Thread[]        @relation(name: "startWith")
  userId         String          @db.Uuid
  user           User            @relation(fields: [userId], references: [id])
  content        String
  type           MessageType
  assets         Asset[]
  reactions      Reaction[]
  pinnedMessages PinnedMessage[]
  bookmarks      Bookmark[]
  mentions       Mention[]
  links          MessageLink[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Asset {
  id        String    @id @default(uuid()) @db.Uuid
  messageId String    @db.Uuid
  message   Message   @relation(fields: [messageId], references: [id])
  type      AssetType
  url       String
  createdAt DateTime  @default(now())
}

model Reaction {
  messageId String   @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())

  @@id([messageId, userId])
}

model PinnedMessage {
  channelId    String   @db.Uuid
  channel      Channel  @relation(fields: [channelId], references: [id])
  messageId    String   @db.Uuid
  message      Message  @relation(fields: [messageId], references: [id])
  pinnedBy     String   @db.Uuid
  pinnedByUser User     @relation(fields: [pinnedBy], references: [id])
  pinnedAt     DateTime @default(now())

  @@id([channelId, messageId, pinnedBy])
}

/*
ユーザーが個人的にメッセージを保存しておくためのブックマーク機能に使用するテーブル
*/
model Bookmark {
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  messageId String   @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())

  @@id([messageId, userId])
}

model Mention {
  messageId       String   @db.Uuid
  message         Message  @relation(fields: [messageId], references: [id])
  mentionedUserId String   @db.Uuid
  mentionedUser   User     @relation(fields: [mentionedUserId], references: [id])
  createdAt       DateTime @default(now())

  @@id([messageId, mentionedUserId])
}

model CustomEmoji {
  id          String    @id @default(uuid()) @db.Uuid
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  name        String
  url         String
  createdAt   DateTime  @default(now())
}

model MessageLink {
  id          String   @id @default(uuid()) @db.Uuid
  messageId   String   @db.Uuid
  message     Message  @relation(fields: [messageId], references: [id])
  url         String
  title       String?
  description String?
  ogImageUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DM
}

enum ChannelMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum MessageType {
  NORMAL
  IMPORTANT
  PROJECT
}

enum AssetType {
  IMAGE
  VIDEO
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "ER Diagram"
}
